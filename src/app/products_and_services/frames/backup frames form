   
              <div className="flex flex-col items-center justify-center">
            <Image
                src="/images/logo.png"
                alt="Logo"
                width={100}
                height={50}
                className="object-contain"
            />
            <h1 className="text-center text-2xl text-purple-300 font-bold">Criar Armação</h1>
        </div>
  {/* Data e Hora */}
  <div className="flex space-x-4">
    <div>
      <label className="block text-sm font-medium text-[#800080]">Data</label>
      <input
        type="date"
        name="data"
        value={formData.data}
        className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
        readOnly
      />
    </div>
    
    <div>
      <label className="block text-sm font-medium text-[#800080]">Hora</label>
      <input
        type="time"
        name="hora"
        value={formData.hora}
        className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
        readOnly
      />
    </div>
  </div>

  {/* Loja */}
  <div className="text-black flex space-x-4 mt-2">
    {['Loja 1', 'Loja 2'].map((loja) => (
        <button
            key={loja}
            type="button"
            onClick={() => handleMultiSelect('loja', loja)} // Usando a função handleMultiSelect
            className={`px-4 py-2 rounded-lg ${formData.loja.includes(loja) ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
        >
            {loja}
        </button>
    ))}
</div>


  {/* Fabricante */}
  <div>
    <label className="block text-sm font-medium text-[#800080]">Fabricante *</label>
    <select
      name="fabricante"
      value={formData.fabricante}
      onChange={handleChange}
      className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
    >
      <option value="Aramis">Aramis</option>
      <option value="King Ice">King Ice</option>
      <option value="Mormaii">Mormaii</option>
    </select>
  </div>

  {/* Fornecedor */}
  <div>
    <label className="block text-sm font-medium text-[#800080]">Fornecedor *</label>
    <select
      name="fornecedor"
      value={formData.fornecedor}
      onChange={handleChange}
      className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
    >
      <option value="Ana Hickmann Eyewear">Ana Hickmann Eyewear</option>
      <option value="De Rigo Brasil">De Rigo Brasil</option>
      <option value="JR Adamver">JR Adamver</option>
      <option value="Masi do Brasil">Masi do Brasil</option>
    </select>
  </div>

  {/* Marca */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Marca *</label>
    <div className=" text-black flex flex-wrap gap-2 mt-2">
        {['Ana Hickmann', 'Aramis', 'Burguese', 'Carmim', 'Cavalera', 'Colcci', 'Detroit', 'Evoke', 'Maresia', 'Maria Valentina', 'Masi', 'Mormaii', 'Police', 'Red Nose', 'VCTY', 'Vizzano', 'Yalea'].map((marca) => (
            <button
                key={marca}
                type="button"
                onClick={() => setFormData({ ...formData, marca })}
                className={`px-4 py-2 rounded-lg ${formData.marca === marca ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
            >
                {marca}
            </button>
        ))}
    </div>
</div>

  {/* Gênero */}
  <div>
    <label className="block text-sm font-medium text-[#800080]">Gênero *</label>
    <select
      name="genero"
      value={formData.genero}
      onChange={handleChange}
      className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
    >
      <option value="Masculino">Masculino</option>
      <option value="Feminino">Feminino</option>
      <option value="Unissex">Unissex</option>
    </select>
  </div>

{/* Formato */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Formato *</label>
    <div className="text-black flex flex-wrap gap-2 mt-2">
        {['Redondo', 'Quadrado', 'Retangular', 'Triângulo', 'Oval', 'Coração', 'Diamante', 'Gatinho', 'Hexagonal'].map((formato) => (
            <button
                key={formato}
                type="button"
                onClick={() => setFormData({ ...formData, formato })}
                className={`px-4 py-2 rounded-lg ${formData.formato === formato ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
            >
                {formato}
            </button>
        ))}
    </div>
    <p className="text-sm text-[#800080] mt-2">Selecione o formato geométrico frontal da armação de óculos</p>
</div>


  {/* Aro */}
  <div>
    <label className="block text-sm font-medium text-[#800080]">Aro *</label>
    <select
      name="aro"
      value={formData.aro}
      onChange={handleChange}
      className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
    >
      <option value="Fechado">Fechado</option>
      <option value="Fio aço">Fio aço</option>
      <option value="Fio nylon">Fio nylon</option>
      <option value="Parafusada">Parafusada</option>
    </select>
  </div>

  {/* Material */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Material *</label>
    <div className="text-black flex flex-wrap gap-2 mt-2">
        {['Acetato', 'Aço Inoxidável', 'Alumínio', 'Bambu', 'Fibra de Carbono', 'Grilamid', 'Madeira', 'Metal', 'Nylon', 'Policarbonato', 'Silicone', 'Titânio', 'TR-90'].map((material) => (
            <button
                key={material}
                type="button"
                onClick={() => setFormData({ ...formData, material })}
                className={`px-4 py-2 rounded-lg ${formData.material === material ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
            >
                {material}
            </button>
        ))}
    </div>
    <p className="text-sm text-[#800080] mt-2">Selecione o material predominante da armação dos óculos</p>
</div>

{/* Cor */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Cor *</label>
    <div className="text-black flex flex-wrap gap-2 mt-2">
        {['Amarelo', 'Azul', 'Branco', 'Bronze', 'Camuflado', 'Cinza', 'Degradê', 'Dourado', 'Floral', 'Laranja', 'Madeira', 'Madrepérola', 'Marmorizado', 'Marrom', 'Oncinha', 'Poá', 'Prata', 'Preto Branco', 'Preto Brilho', 'Preto Fosco', 'Rosa', 'Roxo', 'Tartaruga', 'Transparente', 'Verde', 'Vermelho', 'Xadrez', 'Zebra'].map((cor) => (
            <button
                key={cor}
                type="button"
                onClick={() => setFormData({ ...formData, cor })}
                className={`px-4 py-2 rounded-lg ${formData.cor === cor ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
            >
                {cor}
            </button>
        ))}
    </div>
    <p className="text-sm text-[#800080] mt-2">Selecione a cor predominante ou cores combinadas</p>
</div>

{/* Código */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Código *</label>
    <input
        type="text"
        name="codigo"
        value={formData.codigo}
        onChange={handleChange}
        className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
        placeholder="Informe o código da indústria: número de série, código da cor"
        required
    />
    <p className="text-sm text-[#800080] mt-2">Informe o código da indústria: número de série, código da cor.</p>
</div>

{/* Lente */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Lente *</label>
    <div className="text-black flex flex-wrap gap-2 mt-2">
        {[40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70].map((lente) => (
            <button
                key={lente}
                type="button"
                onClick={() => setFormData({ ...formData, lente })}
                className={`px-4 py-2 rounded-lg ${formData.lente === lente ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
            >
                {lente}
            </button>
        ))}
    </div>
    <p className="text-sm text-[#800080] mt-2">Refere-se à largura horizontal de uma lente, medida de uma borda à outra na parte mais larga.</p>
</div>

{/* Ponte */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Ponte *</label>
    <div className="text-black  flex flex-wrap gap-2 mt-2">
        {[14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24].map((ponte) => (
            <button
                key={ponte}
                type="button"
                onClick={() => setFormData({ ...formData, ponte })}
                className={`px-4 py-2 rounded-lg ${formData.ponte === ponte ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
            >
                {ponte}
            </button>
        ))}
    </div>
    <p className="text-sm text-[#800080] mt-2">Refere-se à distância entre as duas lentes, na ponte do nariz.</p>
</div>
 {/* Haste */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Haste *</label>
    <div className="text-black flex flex-wrap gap-2 mt-2">
        {[110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150].map((haste) => (
            <button
                key={haste}
                type="button"
                onClick={() => setFormData({ ...formData, haste })}
                className={`px-4 py-2 rounded-lg ${formData.haste === haste ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
            >
                {haste}
            </button>
        ))}
    </div>
    <p className="text-sm text-[#800080] mt-2">Refere-se ao comprimento total de cada haste, da dobradiça até a extremidade que fica atrás da orelha.</p>
</div>

{/* NCM */}
<div>
    <label className="block text-sm font-medium text-[#800080]">NCM *</label>
    <div className="text-black  flex flex-wrap gap-2 mt-2">
        {['900.311.00', '9001.50.00', '9004.10.00'].map((ncm) => (
            <button
                key={ncm}
                type="button"
                onClick={() => setFormData({ ...formData, ncm })}
                className={`px-4 py-2 rounded-lg ${formData.ncm === ncm ? 'bg-purple-200' : 'bg-gray-100'} hover:bg-purple-300`}
            >
                {ncm}
            </button>
        ))}
    </div>
    <p className="text-sm text-[#800080] mt-2">Selecione o código do Sistema utilizado para padronizar a identificação de produtos no Mercosul.</p>
</div>

{/* Custo */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Custo *</label>
    <input
        type="text"
        name="custo"
        value={formData.custo}
        onChange={handleChange}
        className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
        placeholder="Informe valor de custo"
        required
    />
</div>

{/* Valor */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Valor *</label>
    <input
        type="text"
        name="valor"
        value={formData.valor}
        onChange={handleChange}
        className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
        placeholder="Informe preço de venda"
        required
    />
</div>

{/* Imagem */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Imagem</label>
    <input
        type="file"
        name="imagem"
        onChange={(e) => setFormData({ ...formData, imagem: e.target.files[0] })}
        className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
        accept="image/png, image/gif, image/jpeg"
    />
    <p className="text-sm text-gray-500">Apenas um arquivo. Limite de 2 MB. Tipos permitidos: png, gif, jpg, jpeg.</p>
</div>

{/* Produto */}
<div>
    <label className="block text-sm font-medium text-[#800080]">Produto *</label>
    <input
        type="text"
        name="produto"
        value={formData.produto}
        onChange={handleChange}
        className="bg-gray-100 px-4 py-2 rounded-lg text-black w-full mt-2"
        placeholder="Informe o nome do produto"
        required
    />
</div>

{/* Botão de salvar */}
<div className="flex justify-center mt-4">
    <button
        type="submit"
        className={`bg-[#9f206b] text-white px-6 py-2 rounded-lg shadow hover:bg-[#850f56] transition ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}
        disabled={isLoading}
    >
        {isLoading ? ' <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[#81059e]"></div>' : 'Salvar'}
    </button>
</div>


  {/* Popup de Sucesso */}
  {showSuccessPopup && (
    <div className="fixed bottom-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg">
      <p>Produto enviado com sucesso!</p>
      <p>Você será redirecionado para a página inicial.</p>
    </div>
  )}
